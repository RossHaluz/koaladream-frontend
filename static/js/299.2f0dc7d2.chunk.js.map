{"version":3,"file":"static/js/299.2f0dc7d2.chunk.js","mappings":"qQAQMA,EAAmBC,EAAAA,GAAW,CAClCC,KAAMD,EAAAA,GAAW,sBAAsBE,SAAS,6BA6GlD,EA1G0B,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACnBF,EAAsCE,EAAtCF,KAAMG,EAAgCD,EAAhCC,aAAmBC,EAAaF,EAAlBG,IACtBC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MAEXC,EAAgB,CACpBV,KAAMA,EACNG,aAAcA,GAShB,OACE,iBAAKQ,UAAU,oCAAf,WACE,eAAIA,UAAU,wBAAd,0BACCT,IACC,SAAC,KAAD,CACEQ,cAAeA,EACfE,SAZS,SAACC,EAAD,GAA2B,IAAjBC,EAAgB,EAAhBA,UACzBR,GAASS,EAAAA,EAAAA,IAAa,CAAEF,MAAAA,EAAOT,SAAAA,KAC/BI,EAAS,kBACTM,GACD,EASOhB,iBAAkBA,EAHpB,SAKG,YAAiB,IAAdkB,EAAa,EAAbA,OACF,OACE,UAAC,KAAD,CAAML,UAAU,2BAAhB,WACE,mBAAOA,UAAU,0BAAjB,WACE,iBAAKA,UAAU,+BAAf,WACE,yCACa,iBAAMA,UAAU,eAAhB,mBAEb,SAAC,KAAD,CACEX,KAAK,OACLiB,KAAK,OACLC,YAAY,cACZP,UAAU,uLAGd,SAAC,KAAD,CACEX,KAAK,OACLmB,UAAU,IACVR,UAAU,4FAGd,iBAAKA,UAAU,2BAAf,WACE,SAAC,KAAD,CACEX,KAAK,eACLoB,OAAQ,SAAAC,GAAY,OAClB,iCACE,iBAAKV,UAAU,+BAAf,WACE,eAAIA,UAAU,wBAAd,kCAGA,mBACEM,KAAK,SACLK,QAAS,kBAAMD,EAAaE,KAAK,CAAEvB,KAAM,IAAhC,EACTW,UAAU,iEAHZ,UAKE,SAAC,MAAD,CAAUA,UAAU,gEAGxB,gBAAKA,UAAU,2BAAf,SACGK,EAAOb,aAAaqB,KAAI,SAACC,EAAQC,GAAT,OACvB,iBAEEf,UAAU,+BAFZ,WAIE,mBAAOA,UAAU,uDAAjB,0BAEE,SAAC,KAAD,CACEO,YAAY,eACZlB,KAAI,uBAAkB0B,EAAlB,UACJf,UAAU,uLAId,mBACEM,KAAK,SACLK,QAAS,kBAAMD,EAAaM,OAAOD,EAA1B,EAFX,UAIE,SAAC,MAAD,CAAiBf,UAAU,uCAhBxBe,EAFgB,QAfX,KAyCtB,mBACET,KAAK,SACLN,UAAU,+FAFZ,gCASP,MAKV,E,oBCjGD,EAZ8B,WAC5B,IAAQP,GAAawB,EAAAA,EAAAA,MAAbxB,SACFE,GAAWC,EAAAA,EAAAA,MACXL,GAAS2B,EAAAA,EAAAA,IAAYC,EAAAA,GAM3B,OAJAC,EAAAA,EAAAA,YAAU,WACRzB,GAAS0B,EAAAA,EAAAA,IAAU5B,GACpB,GAAE,CAACE,EAAUF,KAEP,8BAAGF,IAAU,SAAC,EAAD,CAAmBA,OAAQA,KAChD,C,8ECjBM,IAAM+B,EAAgB,SAAAC,GAAK,OAAIA,EAAMhC,OAAOiC,OAAjB,EAErBL,EAAe,SAAAI,GAAK,OAAIA,EAAMhC,OAAOA,MAAjB,C","sources":["components/AdminOptionUpdate.jsx","pages/AdminOptionUpdatePage.jsx","redux/options/selectors.js"],"sourcesContent":["import { Formik, Form, Field, ErrorMessage, FieldArray } from 'formik';\nimport * as Yup from 'yup';\nimport { BsPlusLg } from 'react-icons/bs';\nimport { RiDeleteBinLine } from 'react-icons/ri';\nimport { useDispatch } from 'react-redux';\nimport { updateOption } from 'redux/options/operetions';\nimport { useNavigate } from 'react-router-dom';\n\nconst validationSchema = Yup.object({\n  name: Yup.string('Type a name option').required('Name option is required'),\n});\n\nconst AdminOptionUpdate = ({ option }) => {\n  const { name, optionValues, _id: optionId } = option;\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const initialValues = {\n    name: name,\n    optionValues: optionValues,\n  };\n\n  const onSubmit = (value, { resetForm }) => {\n    dispatch(updateOption({ value, optionId }));\n    navigate('/admin/options');\n    resetForm();\n  };\n\n  return (\n    <div className=\"p-[15px] flex flex-col gap-[15px]\">\n      <h1 className=\"text-[24px] font-bold\">Eddit option</h1>\n      {option && (\n        <Formik\n          initialValues={initialValues}\n          onSubmit={onSubmit}\n          validationSchema={validationSchema}\n        >\n          {({ values }) => {\n            return (\n              <Form className=\"flex flex-col gap-[30px]\">\n                <label className=\"text-[18px] font-medium\">\n                  <div className=\"flex items-center gap-[15px]\">\n                    <h3>\n                      Name option<span className=\"text-red-500\">*</span>\n                    </h3>\n                    <Field\n                      name=\"name\"\n                      type=\"text\"\n                      placeholder=\"Nema option\"\n                      className=\"bg-transparent border border-solid border-[#7FAA84] w-[380px] rounded-[5px] px-[15px] py-[15px] text-[16px] text-[#484848]/[.50] tracking-[0.32px] leading-[24px] outline-none\"\n                    />\n                  </div>\n                  <ErrorMessage\n                    name=\"name\"\n                    component=\"p\"\n                    className=\"text-[#EF787A] text-[16px] font-semibold tracking-[0.32px] leading-[24px] mt-[15px]\"\n                  />\n                </label>\n                <div className=\"flex flex-col gap-[20px]\">\n                  <FieldArray\n                    name=\"optionValues\"\n                    render={arrayHelpers => (\n                      <>\n                        <div className=\"flex items-center gap-[15px]\">\n                          <h2 className=\"text-[24px] font-bold\">\n                            Eddit option values\n                          </h2>\n                          <button\n                            type=\"button\"\n                            onClick={() => arrayHelpers.push({ name: '' })}\n                            className=\"p-[15px] bg-[#343a40] rounded-[5px] w-[34px] h-[34px] relative\"\n                          >\n                            <BsPlusLg className=\"text-[#fff] text-[24px] absolute top-[5px] left-[5px]\" />\n                          </button>\n                        </div>\n                        <div className=\"flex flex-col gap-[15px]\">\n                          {values.optionValues.map((friend, index) => (\n                            <div\n                              key={index}\n                              className=\"flex items-center gap-[15px]\"\n                            >\n                              <label className=\"flex items-center gap-[15px] text-[18px] font-medium\">\n                                Option value\n                                <Field\n                                  placeholder=\"Option value\"\n                                  name={`optionValues[${index}].name`}\n                                  className=\"bg-transparent border border-solid border-[#7FAA84] w-[380px] rounded-[5px] px-[15px] py-[15px] text-[16px] text-[#484848]/[.50] tracking-[0.32px] leading-[24px] outline-none\"\n                                />\n                              </label>\n\n                              <button\n                                type=\"button\"\n                                onClick={() => arrayHelpers.remove(index)}\n                              >\n                                <RiDeleteBinLine className=\"w-[24px] h-[24px] text-red-500\" />\n                              </button>\n                            </div>\n                          ))}\n                        </div>\n                      </>\n                    )}\n                  />\n                  <button\n                    type=\"submit\"\n                    className=\"py-[15px] px-[25px] bg-[#7FAA84] rounded-[5px] text-[#fff] text-[16px] font-medium w-[220px]\"\n                  >\n                    Update option\n                  </button>\n                </div>\n              </Form>\n            );\n          }}\n        </Formik>\n      )}\n    </div>\n  );\n};\n\nexport default AdminOptionUpdate;\n","import AdminOptionUpdate from 'components/AdminOptionUpdate';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport { getOption } from 'redux/options/operetions';\nimport { selectOption } from 'redux/options/selectors';\n\nconst AdminOptionUpdatePage = () => {\n  const { optionId } = useParams();\n  const dispatch = useDispatch();\n  const option = useSelector(selectOption);\n\n  useEffect(() => {\n    dispatch(getOption(optionId));\n  }, [dispatch, optionId]);\n\n  return <>{option && <AdminOptionUpdate option={option} />}</>;\n};\n\nexport default AdminOptionUpdatePage;\n","export const selectOptions = state => state.option.options;\n\nexport const selectOption = state => state.option.option;\n"],"names":["validationSchema","Yup","name","required","option","optionValues","optionId","_id","dispatch","useDispatch","navigate","useNavigate","initialValues","className","onSubmit","value","resetForm","updateOption","values","type","placeholder","component","render","arrayHelpers","onClick","push","map","friend","index","remove","useParams","useSelector","selectOption","useEffect","getOption","selectOptions","state","options"],"sourceRoot":""}